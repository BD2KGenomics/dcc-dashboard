'use strict';

var SERVER_URL = "https://dev.ucsc-cgl.org/api/v1/"
var BillingAPI_Connector = angular.module('BillingAPI_Connector', [], function($interpolateProvider){
   $interpolateProvider.startSymbol('{-');
   $interpolateProvider.endSymbol('-}');
});

BillingAPI_Connector.factory('myProjects', function($http, $q){
   return{
      getProjects: function(){
         return $http.get(SERVER_URL+'projects')
      }
   }
});

BillingAPI_Connector.factory('myInvoices', function($http, $q){
   return{
      data: function(){
         return $http.get(SERVER_URL+'invoices'); },
      getInvoices: function(project_name) {
         return $http.get(SERVER_URL+'invoices', {params: {project: project_name}});
      }
   }
});


BillingAPI_Connector.controller('billing_controller', function($scope, $http, $compile, $q, myProjects, myInvoices) {
   $scope.projects = [];
   $scope.currentProject = "";
   $scope.invoices = [];
   $scope.activeInvoice = null;
   $scope.viewingDetails = false;
   $scope.welcoming = true;
   var pieArrAnalysis =[];
   
   myProjects.getProjects().then(
      function (result) {
          $scope.projects = result.data.map(function(project){
              return {project_name: project, selected: false};
          });
      }
   );

   $scope.hasCheck = function (facet, item) {
      if (facet + item in checked_boxes) {
          return true;
      }
      else {
          return false;
      }
   };

   var retrieveInvoice = function(projectname) {
      myInvoices.getInvoices(projectname).then(function(result) {
          $scope.costData = result;
          $scope.invoices = result.data.map(function(invoice) {
              invoice.selected = false;
              drawProjectChart();
              return invoice;
          });
      });
   };


   $scope.selectInvoice = function (idx) {
      $scope.activeInvoice = idx;
   };

   $scope.selectProject = function (projectName) {
      $scope.currentProject = projectName;
      $scope.projects = $scope.projects.map(function(project) {
          return {project_name: project.project_name, selected: project.project_name === projectName};
      });
      $scope.invoices = [];
      retrieveInvoice(projectName);
      
   };

   $scope.quantizeString = function (moneystring, radix) {
      var retstr = '';
      var foundDecimal = false;
      var afterRadix = 0;
      for(var i = 0; (i < moneystring.length) && (afterRadix <= radix); i++) {
          if(moneystring[i] == '.') {
              foundDecimal = true;
          }
          if(foundDecimal) {
              afterRadix += 1;
          }
          retstr = retstr + moneystring[i];
      }
      return retstr;
   };

   $scope.isActiveProject = function (project) {
      return $scope.currentProject === project;
   };

   $scope.viewDetails = function (invoice_index) {
      $scope.viewingDetails = true;
      $scope.activeInvoice = $scope.invoices[invoice_index];
   }
  
   $scope.unviewDetails = function () {
      $scope.viewingDetails = false;
      $scope.activeInvoice = null;
      drawProjectChart();
   }
  
   $scope.welcome = function(){
      if ($scope.currentProject === ""){
         $scope.welcoming = true;
      }
      else{
         $scope.welcoming = false;
      }
   }

   //pie charts
   // turns pie data into array format
   $scope.piedata = function(){
      var loopPromises = [];
      var myItem = $scope.currentProject;
      var deferred = $q.defer();
      loopPromises.push(deferred.promise);
      setTimeout(function () {
         var costtemp = $scope.invoices;
         console.log($scope.invoices);
         var cost = 0;
         pieArrAnalysis =[];
         var pieTemp = [];
         var pieTemp2 = [];
         for (var i=0; i<costtemp.length; i++){
            cost = parseFloat(costtemp[i].cost);
            console.log(cost);
            pieTemp = [];
            pieTemp.push(costtemp[i].month_of);
            pieTemp.push(cost);
            pieTemp2.push(pieTemp);
            deferred.resolve();
         }
         for (var i=0; i<costtemp.length; i++){
            pieArrAnalysis.push(pieTemp2[i]);
         }
         return pieArrAnalysis;
      }, 1000);

      $q.all(loopPromises).then(function () {
      });	

   }
   
   //pie chart maker
   var chart;
   google.charts.load('current', {'packages':['corechart']});
   google.charts.setOnLoadCallback(drawProjectChart);
   function drawProjectChart() {
      $scope.piedata();
      setTimeout(function () {
         var data = new google.visualization.DataTable();
         data.addColumn('string', 'Type');
         data.addColumn('number', 'Number');
         console.log(pieArrAnalysis);
         data.addRows(pieArrAnalysis);

         var options = {
            title: 'Cost by Date',
            width: 200,
            height: 200,
            legend: 'none',
            fontName: 'Helvetica Neue',
            slices: {
               0: { color: '#1A535C' },
               1: { color: '#4CC9C0' },
               2: { color: '#FF6B6B' },
               3: { color: '#FFA560' },
               4: { color: '#113871' },
               5: { color: '#5C83D0' },
               6: { color: '#FFE66D' }
            }
         };

         chart = new google.visualization.PieChart(document.getElementById('piechartProject'));

         chart.draw(data, options);
      }, 2000);
   }      







});
